"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.registerConnector = exports.Connector = void 0;

var _inherits2 = _interopRequireDefault(require("@babel/runtime/helpers/inherits"));

var _possibleConstructorReturn2 = _interopRequireDefault(require("@babel/runtime/helpers/possibleConstructorReturn"));

var _getPrototypeOf2 = _interopRequireDefault(require("@babel/runtime/helpers/getPrototypeOf"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _register = require("@antv/g2/lib/interaction/action/register");

var _geometry = _interopRequireDefault(require("@antv/g2/lib/interaction/action/component/tooltip/geometry"));

var _util = require("@antv/util");

var _core = require("../core");

function _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2["default"])(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2["default"])(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2["default"])(this, result); }; }

function _isNativeReflectConstruct() { if (typeof Reflect === "undefined" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === "function") return true; try { Date.prototype.toString.call(Reflect.construct(Date, [], function () {})); return true; } catch (e) { return false; } }

var CONNECTOR_MAP = {};

var Connector = /*#__PURE__*/function () {
  function Connector(type) {
    (0, _classCallCheck2["default"])(this, Connector);
    this.cfg = {
      shared: true
    };
    this.chartMap = {};
    this.state = {};
    this.id = (0, _util.uniqueId)('bx-action');
    this.type = type || 'tooltip';
  }

  (0, _createClass2["default"])(Connector, [{
    key: "connect",
    value: function connect(id, chart, pointFinder) {
      this.chartMap[id] = {
        chart: chart,
        pointFinder: pointFinder
      };
      chart.interaction("connect-".concat(this.type, "-").concat(this.id));

      if (this.type === 'tooltip' && this.cfg.shared) {
        if ((0, _util.get)(chart, ['options', 'tooltip', 'shared']) === undefined) {
          (0, _util.set)(chart, ['options', 'tooltip', 'shared'], true);
        }

        ;
      }

      return this;
    }
  }, {
    key: "unConnect",
    value: function unConnect(id) {
      this.chartMap[id].chart.removeInteraction("connect-".concat(this.type, "-").concat(this.id));
      delete this.chartMap[id];
    }
  }, {
    key: "destroy",
    value: function destroy() {
      (0, _register.unregisterAction)("connect-".concat(this.type, "-").concat(this.id));
    }
  }]);
  return Connector;
}(); // 关联图表何处触发tooltip


exports.Connector = Connector;

var createTooltipConnector = function createTooltipConnector() {
  var cm = new Connector('tooltip');
  (0, _core.registerAction)("connect-tooltip-".concat(cm.id), /*#__PURE__*/function (_TooltipAction) {
    (0, _inherits2["default"])(ConnectTooltip, _TooltipAction);

    var _super = _createSuper(ConnectTooltip);

    function ConnectTooltip() {
      var _this;

      (0, _classCallCheck2["default"])(this, ConnectTooltip);
      _this = _super.apply(this, arguments);
      _this.CM = cm;
      return _this;
    }

    (0, _createClass2["default"])(ConnectTooltip, [{
      key: "showTooltip",
      value: function showTooltip(view, point) {
        var records = view.getTooltipItems(point) || point;
        (0, _util.forIn)(this.CM.chartMap, function (item) {
          var chart = item.chart,
              pointFinder = item.pointFinder;

          if (chart.destroyed || !chart.visible) {
            return;
          }

          if (pointFinder) {
            var triggerPoint = pointFinder(records, chart); // 如果没有返回值，则不联动

            if (triggerPoint) {
              chart.showTooltip(triggerPoint);
            }

            ;
          } else {
            chart.showTooltip(point);
          }
        });
      }
    }, {
      key: "hideTooltip",
      value: function hideTooltip() {
        (0, _util.forIn)(this.CM.chartMap, function (_ref) {
          var chart = _ref.chart;
          return chart.hideTooltip();
        });
      }
    }]);
    return ConnectTooltip;
  }(_geometry["default"]));
  (0, _core.registerInteraction)("connect-tooltip-".concat(cm.id), {
    start: [{
      trigger: 'plot:mousemove',
      action: "connect-tooltip-".concat(cm.id, ":show")
    }],
    end: [{
      trigger: 'plot:mouseleave',
      action: "connect-tooltip-".concat(cm.id, ":hide")
    }]
  });
  return cm;
};

var registerConnector = function registerConnector(cid, tid, chart, shared, pointFinder) {
  var connector = CONNECTOR_MAP[cid]; // 销毁

  if (chart === null && connector) {
    connector.unConnect(tid);
    return;
  } // 创建 & 注册


  if (connector) {
    connector.connect(tid, chart, pointFinder);
  } else {
    CONNECTOR_MAP[cid] = createTooltipConnector(); // shared false 是为了兼容饼图不支持shared的tooltip

    CONNECTOR_MAP[cid].cfg.shared = !!shared;
    CONNECTOR_MAP[cid].connect(tid, chart, pointFinder);
  }
};

exports.registerConnector = registerConnector;
var _default = createTooltipConnector;
exports["default"] = _default;