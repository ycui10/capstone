"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _object = _interopRequireDefault(require("object.assign"));

var _react = _interopRequireDefault(require("react"));

var _util = require("@antv/g2/lib/geometry/shape/area/util");

require("@antv/g2/lib/geometry/shape/line/step");

var _isObject2 = _interopRequireDefault(require("@antv/util/lib/is-object"));

var _deepMix2 = _interopRequireDefault(require("@antv/util/lib/deep-mix"));

var _get2 = _interopRequireDefault(require("@antv/util/lib/get"));

var _set2 = _interopRequireDefault(require("@antv/util/lib/set"));

var _base = require("@antv/g2/lib/geometry/shape/base");

var d3Color = _interopRequireWildcard(require("d3-color"));

var _useChartView = _interopRequireDefault(require("../hooks/useChartView"));

var _Line = _interopRequireDefault(require("./Line"));

var _Point = _interopRequireDefault(require("./Point"));

var _Area = _interopRequireDefault(require("./Area"));

var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var areaStyle = {
  "default": {
    "style": {
      "fill": "#5B8FF9",
      "fillOpacity": 0.25,
      "stroke": null
    }
  },
  "active": {
    "style": {
      "fillOpacity": 0.5
    }
  },
  "inactive": {
    "style": {
      "fillOpacity": 0.4
    }
  },
  "selected": {
    "style": {
      "fillOpacity": 0.5
    }
  }
};

var LineAdvance = function LineAdvance(props) {
  var point = props.point,
      area = props.area,
      shape = props.shape,
      cfg = __rest(props, ["point", "area", "shape"]);

  var pointCfg = {
    shape: 'circle'
  };
  var areaCfg = {
    shape: shape === 'smooth' ? 'gradient-smooth' : 'gradient'
  };
  var view = (0, _useChartView["default"])();
  var theme = view.getTheme(); // todo: 需要g2层修改

  theme.geometries.area.gradient = areaStyle; // todo: 需要g2层修改

  theme.geometries.area['gradient-smooth'] = areaStyle; // 默认为shared

  if ((0, _get2["default"])(view, ['options', 'tooltip', 'shared']) === undefined) {
    (0, _set2["default"])(view, ['options', 'tooltip', 'shared'], true);
  }

  ; // 默认showCrosshairs

  if ((0, _get2["default"])(view, ['options', 'tooltip', 'showCrosshairs']) === undefined) {
    (0, _set2["default"])(view, ['options', 'tooltip', 'showCrosshairs'], true);
  }

  ;

  if ((0, _get2["default"])(view, ['options', 'tooltip', 'showMarkers']) === undefined) {
    (0, _set2["default"])(view, ['options', 'tooltip', 'showMarkers'], true);
  }

  ;

  if ((0, _isObject2["default"])(pointCfg)) {
    (0, _deepMix2["default"])(pointCfg, point);
  }

  if ((0, _isObject2["default"])(areaCfg)) {
    (0, _deepMix2["default"])(areaCfg, area);
  }

  return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, /*#__PURE__*/_react["default"].createElement(_Line["default"], (0, _object["default"])({
    shape: shape,
    state: {
      "default": {
        style: {
          shadowColor: '#ddd',
          shadowBlur: 3,
          shadowOffsetY: 2
        }
      },
      active: {
        style: {
          shadowColor: '#ddd',
          shadowBlur: 3,
          shadowOffsetY: 5
        }
      }
    }
  }, cfg)), !!area && /*#__PURE__*/_react["default"].createElement(_Area["default"], (0, _object["default"])({}, cfg, {
    tooltip: false
  }, areaCfg)), !!point && /*#__PURE__*/_react["default"].createElement(_Point["default"], (0, _object["default"])({
    size: 3
  }, cfg, {
    state: {
      active: {
        style: {
          stroke: '#fff',
          lineWidth: 1.5,
          strokeOpacity: 0.9
        }
      }
    },
    tooltip: false
  }, pointCfg)));
}; // Area 几何标记默认的 shape：填充的区域图


(0, _base.registerShape)('area', 'gradient', {
  draw: function draw(cfg, container) {
    var attrs = (0, _util.getShapeAttrs)(cfg, false, false, this);
    var c = attrs.fill;
    var clr = d3Color.color(c);

    if (clr) {
      attrs.fill = "l (90) 0:".concat(d3Color.rgb(clr.r, clr.g, clr.b, 1).formatRgb(), " 1:").concat(d3Color.rgb(clr.r, clr.g, clr.b, 0.1).formatRgb());
    } // attrs.fill = 'red';


    var shape = container.addShape({
      type: 'path',
      attrs: attrs,
      name: 'area'
    });
    return shape;
  }
});
/**
 * 填充的平滑曲面图
 */

(0, _base.registerShape)('area', 'gradient-smooth', {
  draw: function draw(cfg, container) {
    var coordinate = this.coordinate;
    var attrs = (0, _util.getShapeAttrs)(cfg, false, true, this, (0, _util.getConstraint)(coordinate));
    var c = attrs.fill;
    var clr = d3Color.color(c);

    if (clr) {
      attrs.fill = "l (90) 0:".concat(d3Color.rgb(clr.r, clr.g, clr.b, 1).formatRgb(), " 1:").concat(d3Color.rgb(clr.r, clr.g, clr.b, 0.1).formatRgb());
    } // attrs.fill = 'red';


    var shape = container.addShape({
      type: 'path',
      attrs: attrs,
      name: 'area'
    });
    return shape;
  }
});
var _default2 = LineAdvance;
exports["default"] = _default2;