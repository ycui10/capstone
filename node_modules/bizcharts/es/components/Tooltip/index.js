"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Tooltip;

var _object = _interopRequireDefault(require("object.assign"));

var _react = _interopRequireWildcard(require("react"));

var _isFunction2 = _interopRequireDefault(require("@antv/util/lib/is-function"));

var _tooltip = _interopRequireDefault(require("@antv/g2/lib/chart/controller/tooltip"));

var _uniqueId2 = _interopRequireDefault(require("@antv/util/lib/unique-id"));

var _isArray2 = _interopRequireDefault(require("@antv/util/lib/is-array"));

var _isString2 = _interopRequireDefault(require("@antv/util/lib/is-string"));

var _core = require("../../core");

var _useChartView = _interopRequireDefault(require("../../hooks/useChartView"));

var _ReactTooltip = _interopRequireDefault(require("./ReactTooltip"));

var _createTooltipConnector = require("../../connector/createTooltipConnector");

require("./actions");

var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

(0, _core.registerComponentController)('tooltip', _tooltip["default"]);

var isReactTooltip = function isReactTooltip(props) {
  var _props$visible = props.visible,
      visible = _props$visible === void 0 ? true : _props$visible,
      children = props.children;
  return visible && (0, _isFunction2["default"])(children);
};

var TooltipNormal = function TooltipNormal(props) {
  var _props$visible2 = props.visible,
      visible = _props$visible2 === void 0 ? true : _props$visible2,
      children = props.children,
      options = __rest(props, ["visible", "children"]);

  var chartView = (0, _useChartView["default"])();
  chartView.getController('tooltip').clear();

  if (visible === true) {
    chartView.tooltip((0, _object["default"])({
      customContent: null,
      showMarkers: false
    }, options));
  } else {
    chartView.tooltip(false);
  }

  return null;
};

function Tooltip(props) {
  var children = props.children,
      triggerOn = props.triggerOn,
      onShow = props.onShow,
      onChange = props.onChange,
      onHide = props.onHide,
      lock = props.lock,
      linkage = props.linkage,
      options = __rest(props, ["children", "triggerOn", "onShow", "onChange", "onHide", "lock", "linkage"]);

  var chartView = (0, _useChartView["default"])();
  chartView.removeInteraction('tooltip');
  chartView.removeInteraction('tooltip-click');
  chartView.removeInteraction('tooltip-lock');

  if (triggerOn === 'click') {
    // 只有click的时候才会出现tooltip，hover 无效
    chartView.interaction("tooltip-click");
  } else if (lock) {
    // hover的时候触发，但是点击的时候锁定位置
    chartView.interaction("tooltip-lock");
  } else {
    // click不会有任何动作，只有hover的时候跟随
    chartView.interaction("tooltip");
  }

  var connectorId = (0, _react.useRef)((0, _uniqueId2["default"])('tooltip')); // tooltip 联动

  (0, _react.useEffect)(function () {
    if ((0, _isArray2["default"])(linkage)) {
      (0, _createTooltipConnector.registerConnector)(linkage[0], connectorId.current, chartView, options.shared, linkage[1]);
    } else if ((0, _isString2["default"])(linkage)) {
      (0, _createTooltipConnector.registerConnector)(linkage, connectorId.current, chartView, options.shared);
    }
  }, [linkage, chartView]);
  var showFnc = (0, _react.useCallback)(function (ITooltipEvent) {
    if ((0, _isFunction2["default"])(onShow)) {
      onShow(ITooltipEvent, chartView);
    }
  }, []);
  var changeFnc = (0, _react.useCallback)(function (ITooltipEvent) {
    if ((0, _isFunction2["default"])(onChange)) {
      onChange(ITooltipEvent, chartView);
    }
  }, []);
  var hideFnc = (0, _react.useCallback)(function (ITooltipEvent) {
    if ((0, _isFunction2["default"])(onHide)) {
      onHide(ITooltipEvent, chartView);
    }
  }, []);
  chartView.off('tooltip:show', showFnc);
  chartView.on('tooltip:show', showFnc);
  chartView.off('tooltip:change', changeFnc);
  chartView.on('tooltip:change', changeFnc);
  chartView.off('tooltip:hide', hideFnc);
  chartView.on('tooltip:hide', hideFnc);
  return isReactTooltip(props) ? /*#__PURE__*/_react["default"].createElement(_ReactTooltip["default"], (0, _object["default"])({}, options), children) : /*#__PURE__*/_react["default"].createElement(TooltipNormal, (0, _object["default"])({}, props));
}

Tooltip.defaultProps = {
  showMarkers: false,
  triggerOn: 'hover'
};