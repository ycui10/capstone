"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));

var _object = _interopRequireDefault(require("object.assign"));

var _classCallCheck2 = _interopRequireDefault(require("@babel/runtime/helpers/classCallCheck"));

var _createClass2 = _interopRequireDefault(require("@babel/runtime/helpers/createClass"));

var _uniqueId = _interopRequireDefault(require("@antv/util/lib/unique-id"));

var _each2 = _interopRequireDefault(require("@antv/util/lib/each"));

var _isFunction2 = _interopRequireDefault(require("@antv/util/lib/is-function"));

var _isArray2 = _interopRequireDefault(require("@antv/util/lib/is-array"));

var _isEqual2 = _interopRequireDefault(require("@antv/util/lib/is-equal"));

var _htmlComponent = _interopRequireDefault(require("@antv/component/esm/abstract/html-component"));

var _core = require("../../core");

var _warning = _interopRequireDefault(require("../../utils/warning"));

var _shallowEqual = _interopRequireDefault(require("../../utils/shallowEqual"));

var _pickWithout = _interopRequireDefault(require("../../utils/pickWithout"));

var _cloneDeep = _interopRequireDefault(require("../../utils/cloneDeep"));

var _constant = require("../../utils/constant");

var _events = require("./events");

var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

// @ts-ignore
// fixme: @antv/component@0.7.2 以上版本已修复，但因为g2plot锁到0.6.3
_htmlComponent["default"].prototype.removeDom = function () {
  var container = this.get('container');

  if (container && container.parentNode) {
    container.parentNode.removeChild(container);
  }
};

var processData = function processData(data) {
  if (data && data.rows) {
    return data.rows;
  }

  return data;
};

var ChartHelper = /*#__PURE__*/function () {
  function ChartHelper() {
    (0, _classCallCheck2["default"])(this, ChartHelper);
    this.config = {};
  }

  (0, _createClass2["default"])(ChartHelper, [{
    key: "createInstance",
    value: function createInstance(config) {
      this.chart = new _core.Chart((0, _object["default"])({}, config));
      this.key = (0, _uniqueId["default"])('bx-chart');
      this.chart.emit('initialed');
      this.isNewInstance = true; // 更新了实例的标记

      this.extendGroup = {
        isChartCanvas: true,
        chart: this.chart
      };
    }
  }, {
    key: "render",
    value: function render() {
      if (!this.chart) {
        return;
      }

      if (this.isNewInstance) {
        this.chart.render();
        this.onGetG2Instance(); // @ts-ignore

        this.chart.unbindAutoFit(); // 不使用g2的监听

        this.isNewInstance = false;
      } else {
        this.chart.render(true);
      } // 处理elements状态


      this.chart.emit('processElemens');
    }
  }, {
    key: "onGetG2Instance",
    value: function onGetG2Instance() {
      // 当且仅当 isNewInstance 的时候执行。
      if ((0, _isFunction2["default"])(this.config.onGetG2Instance)) {
        this.config.onGetG2Instance(this.chart);
      }
    }
  }, {
    key: "shouldReCreateInstance",
    value: function shouldReCreateInstance(newConfig) {
      // 如果上一个实例数据为空则直接销毁重建，以免影响动画
      if (!this.chart || newConfig.forceUpdate) {
        return true;
      }

      var _a = this.config,
          preData = _a.data,
          preOptions = __rest(_a, ["data"]);

      var data = newConfig.data,
          options = __rest(newConfig, ["data"]);

      if ((0, _isArray2["default"])(this.config.data) && this.config.data.length === 0 && (0, _isArray2["default"])(data) && data.length !== 0) {
        return true;
      } // scale 切换不需要重建实例


      var unCompareProps = [].concat((0, _toConsumableArray2["default"])(_constant.REACT_PIVATE_PROPS), ['scale', 'width', 'height', 'container', '_container', '_interactions', 'placeholder', /^on/, /^\_on/]);

      if (!(0, _isEqual2["default"])((0, _pickWithout["default"])(preOptions, (0, _toConsumableArray2["default"])(unCompareProps)), (0, _pickWithout["default"])(options, (0, _toConsumableArray2["default"])(unCompareProps)))) {
        return true;
      }

      return false;
    }
  }, {
    key: "update",
    value: function update(props) {
      var _this = this;

      var newConfig = (0, _cloneDeep["default"])(this.adapterOptions(props));

      if (this.shouldReCreateInstance(newConfig)) {
        this.destory();
        this.createInstance(newConfig);
      } // 重置


      if (newConfig.pure) {
        // 纯画布 关闭
        this.chart.axis(false);
        this.chart.tooltip(false);
        this.chart.legend(false);
      } // 事件


      var events = (0, _events.pickEventName)(this.config);
      var newEvents = (0, _events.pickEventName)(newConfig); // 配置

      var data = newConfig.data,
          interactions = newConfig.interactions,
          options = __rest(newConfig, ["data", "interactions"]);

      var _this$config = this.config,
          preData = _this$config.data,
          _this$config$interact = _this$config.interactions,
          preInteractions = _this$config$interact === void 0 ? [] : _this$config$interact;

      if (!this.isNewInstance) {
        // 取消事件绑定
        events.forEach(function (ev) {
          _this.chart.off(ev[1], _this.config["_".concat(ev[0])]);
        });
      }
      /** 更新 */
      // 绑定事件


      newEvents.forEach(function (evName) {
        newConfig["_".concat(evName[0])] = function (ev) {
          // 输入chart实例方便用户使用
          newConfig[evName[0]](ev, _this.chart);
        };

        _this.chart.on(evName[1], newConfig["_".concat(evName[0])]);
      }); // 数据

      if ((0, _isArray2["default"])(preData) && preData.length) {
        // 数据只做2级浅比较
        // fixme: 做4级比较
        var isEqual = true;

        if (newConfig.notCompareData) {
          // 手动关闭对比
          isEqual = false;
        }

        if (preData.length !== data.length) {
          // 长度不相等
          isEqual = false;
        } else {
          preData.forEach(function (element, index) {
            if (!(0, _shallowEqual["default"])(element, data[index])) {
              isEqual = false;
            }
          });
        }

        if (!isEqual) {
          this.chart.data(data); // changeData 会发生重渲染
        }
      } else {
        this.chart.data(data);
      } // 比例尺


      this.chart.scale(options.scale); // 动画

      if (options.animate === false) {
        this.chart.animate(false);
      } else {
        this.chart.animate(true);
      } // 交互 interactions


      preInteractions.forEach(function (interact) {
        // 这里不做对比，无意义，都是要销毁重建，不如直接全量销毁
        _this.chart.removeInteraction(interact);
      });
      interactions.forEach(function (interact) {
        _this.chart.interaction(interact);
      }); // filter

      (0, _each2["default"])(this.config.filter, function (it, index) {
        // 销毁
        if ((0, _isArray2["default"])(it)) {
          _this.chart.filter(it[0], null);
        } else {
          _this.chart.filter(index, null);
        }
      });
      (0, _each2["default"])(newConfig.filter, function (it, index) {
        if ((0, _isArray2["default"])(it)) {
          _this.chart.filter(it[0], it[1]);
        } else {
          _this.chart.filter(index, it);
        }
      }); // 主题

      this.chart.theme(newConfig.theme); // 缓存处理后的配置

      this.config = newConfig;
    }
  }, {
    key: "adapterOptions",
    value: function adapterOptions(_a) {
      var data = _a.data,
          others = __rest(_a, ["data"]); // 剔除 React 自身的属性


      var options = (0, _pickWithout["default"])(others, (0, _toConsumableArray2["default"])(_constant.REACT_PIVATE_PROPS)); // 适配

      var forceFit = options.forceFit;

      if (forceFit) {
        options.autoFit = forceFit;
        (0, _warning["default"])(false, 'forceFit 将会在4.1后不再支持，请使用`autoFit`替代');
      }

      options.data = processData(data) || [];
      return options;
    }
  }, {
    key: "destory",
    value: function destory() {
      if (!this.chart) {
        return;
      }

      this.extendGroup = null;
      var chart = this.chart;
      chart.hide();
      setTimeout(function () {
        // 大坑勿改: 这样做是为了等react 先卸载，再销毁图表实例。
        chart.destroy();
        chart = null;
      }, 0);
      this.chart = null;
      this.config = {};
    }
  }]);
  return ChartHelper;
}();

var _default2 = ChartHelper;
exports["default"] = _default2;