"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TOOLTIP_EVENT = exports.ANNOTATION_EVENT_TARGET = exports.AXIS_EVENT_TARGET = exports.LEGEND_EVENT = exports.GEOM_NAME = exports.LEGEND_EVENT_TARGETS = exports.LIFE_CIRCLE_NAMES = exports.MOBILE_EVENT_NAMES = exports.DRAG_EVENT_NAMES = exports.pickEventName = exports.BASE_EVENT_NAMES = void 0;

var _forIn = _interopRequireDefault(require("@antv/util/lib/for-in"));

// /[^on]+\S+(?=(Click)\b)/
var BASE_EVENT_NAMES = ['mousedown', 'mouseup', 'dblclick', 'mouseenter', 'mouseout', 'mouseover', 'mousemove', 'mouseleave', 'contextmenu', 'click'];
exports.BASE_EVENT_NAMES = BASE_EVENT_NAMES;
var EVENT_ACTION_NAMES = ['mousedown', 'mouseup', 'dblclick', 'mouseenter', 'mouseout', 'mouseover', 'mousemove', 'mouseleave', 'contextmenu', 'click', 'show', 'hide', 'change'];
var RegExpEvent = new RegExp("^on(.*)(?=(".concat(EVENT_ACTION_NAMES.map(function (k) {
  return k.replace(/^\S/, function (s) {
    return s.toUpperCase();
  });
}).join('|'), "))"));

var pickEventName = function pickEventName(props) {
  var names = [];
  (0, _forIn["default"])(props, function (v, k) {
    var event = k.match(/^on(.*)/);

    if (event) {
      var res = k.match(RegExpEvent);

      if (res) {
        var target = res[1].replace(/([A-Z])/g, "-$1").toLowerCase();

        if (target) {
          names.push([k, "".concat(target.replace('-', ''), ":").concat(res[2].toLowerCase())]);
        } else {
          names.push([k, res[2].toLowerCase()]);
        }
      } else {
        names.push([k, event[1].toLowerCase()]);
      }
    }
  });
  return names;
};

exports.pickEventName = pickEventName;
var DRAG_EVENT_NAMES = ['dragstart', 'drag', 'dragend', 'dragover', 'dragenter', 'dragleave', 'drop'];
exports.DRAG_EVENT_NAMES = DRAG_EVENT_NAMES;
var MOBILE_EVENT_NAMES = ['touchstart', 'touchmove', 'touchend'];
exports.MOBILE_EVENT_NAMES = MOBILE_EVENT_NAMES;
var LIFE_CIRCLE_NAMES = ['beforerender', 'afterrender', 'beforepaint', 'afterpaint', 'beforechangedata', 'afterchangedata', 'beforeclear', 'afterclear', 'beforedestroy'];
exports.LIFE_CIRCLE_NAMES = LIFE_CIRCLE_NAMES;
var LEGEND_EVENT_TARGETS = ['legend', 'legend-title', 'legend-item', 'legend-item-name', 'legend-item-Maker', 'legend-item-value'];
exports.LEGEND_EVENT_TARGETS = LEGEND_EVENT_TARGETS;
var GEOM_NAME = ['line', 'area', 'point', 'interval', 'polygon', 'edge', 'schema'];
exports.GEOM_NAME = GEOM_NAME;
var LEGEND_EVENT = ['legend:valuechanged'];
exports.LEGEND_EVENT = LEGEND_EVENT;
var AXIS_EVENT_TARGET = ['axis-label', 'axis-line', 'axis-tick', 'axis-title'];
exports.AXIS_EVENT_TARGET = AXIS_EVENT_TARGET;
var ANNOTATION_EVENT_TARGET = ['annotation', 'annotation-line', 'annotation-line-text', 'annotation-image', 'annotation-region', 'annotation-text'];
exports.ANNOTATION_EVENT_TARGET = ANNOTATION_EVENT_TARGET;
var TOOLTIP_EVENT = ['tooltip:show', 'tooltip:hide', 'tooltip:change'];
exports.TOOLTIP_EVENT = TOOLTIP_EVENT;