"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = Legend;

var _react = require("react");

var _legend = _interopRequireDefault(require("@antv/g2/lib/chart/controller/legend"));

var _isFunction2 = _interopRequireDefault(require("@antv/util/lib/is-function"));

var _core = require("../../core");

var _useChartView = _interopRequireDefault(require("../../hooks/useChartView"));

require("./actions");

var __rest = void 0 && (void 0).__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

(0, _core.registerComponentController)('legend', _legend["default"]);

var undefinedField = function undefinedField(name) {
  return name === undefined;
}; // 单纯的赋值，重复执行不影响性能


function Legend(props) {
  var name = props.name,
      _props$visible = props.visible,
      visible = _props$visible === void 0 ? true : _props$visible,
      onChange = props.onChange,
      filter = props.filter,
      options = __rest(props, ["name", "visible", "onChange", "filter"]);

  var view = (0, _useChartView["default"])();

  if (undefinedField(name)) {
    // 不指定字段，则表示对图例进行整体配置
    if (visible) {
      view.legend(options);
    } else {
      view.legend(false);
    }
  } else {
    if (visible) {
      view.legend(name, options);
    } else {
      view.legend(name, false);
    }
  } // 图例默认置灰


  if ((0, _isFunction2["default"])(filter) && name) {
    view.filter(name, filter);
  } // 事件didmount后绑定一次即可


  (0, _react.useEffect)(function () {
    // 连续图例
    view.on('legend:valuechanged', function (ev) {
      if ((0, _isFunction2["default"])(props.onChange)) {
        props.onChange(ev, view);
      }
    }); // 分类图例

    view.on('legend-item:click', function (ev) {
      if ((0, _isFunction2["default"])(props.onChange)) {
        var target = ev.target;
        var delegateObject = target.get('delegateObject');
        var item = delegateObject.item; // 图例选项

        ev.item = item; // 快捷获取

        props.onChange(ev, view);
      }
    });
  }, []);
  return null;
}