"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _reactReconciler = _interopRequireDefault(require("react-reconciler"));

var _react = _interopRequireDefault(require("react"));

var _group = _interopRequireDefault(require("../../context/group"));

var emptyObject = {}; // 渲染的组件为封装组件，不需要渲染

var HostConfig = {
  getRootHostContext: function getRootHostContext() {},
  getChildHostContext: function getChildHostContext() {},
  createInstance: function createInstance() {},
  finalizeInitialChildren: function finalizeInitialChildren() {
    return false;
  },
  hideTextInstance: function hideTextInstance() {},
  getPublicInstance: function getPublicInstance(instance) {
    return instance;
  },
  hideInstance: function hideInstance() {},
  unhideInstance: function unhideInstance() {},
  createTextInstance: function createTextInstance() {},
  prepareUpdate: function prepareUpdate() {
    return emptyObject;
  },
  shouldDeprioritizeSubtree: function shouldDeprioritizeSubtree() {
    return false;
  },
  appendInitialChild: function appendInitialChild() {},
  appendChildToContainer: function appendChildToContainer() {},
  removeChildFromContainer: function removeChildFromContainer() {},
  prepareForCommit: function prepareForCommit() {},
  resetAfterCommit: function resetAfterCommit() {},
  // 是否需要设置文字内容
  shouldSetTextContent: function shouldSetTextContent() {
    return false;
  },
  supportsMutation: true,
  appendChild: function appendChild() {}
};
var Renderer = (0, _reactReconciler["default"])(HostConfig);
var LegacyRoot = 0;

var withContext = function withContext(element, container) {
  return /*#__PURE__*/_react["default"].createElement(_group["default"].Provider, {
    value: container
  }, /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, element));
};

var ReactG = {
  render: function render(element, container) {
    if (container.clear) {
      container.clear();
    }

    var root = Renderer.createContainer(container, LegacyRoot, false);
    Renderer.updateContainer(withContext(element, container), root, null, function () {
      return undefined;
    });
    return Renderer.getPublicRootInstance(root);
  }
};
var _default = ReactG;
exports["default"] = _default;