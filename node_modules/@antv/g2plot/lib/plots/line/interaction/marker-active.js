"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ActiveTooltipController = void 0;
var tslib_1 = require("tslib");
var util_1 = require("@antv/util");
var dependents_1 = require("../../../dependents");
// @ts-ignore
var ActiveTooltipController = /** @class */ (function (_super) {
    tslib_1.__extends(ActiveTooltipController, _super);
    function ActiveTooltipController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(ActiveTooltipController.prototype, "name", {
        get: function () {
            return 'tooltip-active';
        },
        enumerable: false,
        configurable: true
    });
    ActiveTooltipController.prototype.getTooltipCfg = function () {
        // @ts-ignore
        var cfg = _super.prototype.getTooltipCfg.call(this);
        return tslib_1.__assign(tslib_1.__assign({}, cfg), { showCrosshairs: true, showMarkers: false, shared: true });
    };
    return ActiveTooltipController;
}(dependents_1.TooltipController));
exports.ActiveTooltipController = ActiveTooltipController;
dependents_1.registerComponentController('tooltip-active', ActiveTooltipController);
var MarkerActiveAction = /** @class */ (function (_super) {
    tslib_1.__extends(MarkerActiveAction, _super);
    function MarkerActiveAction() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MarkerActiveAction.prototype.init = function () {
        // 移除默认的tooltip交互
        this.getView().removeInteraction('tooltip');
    };
    MarkerActiveAction.prototype.show = function () {
        var curLocation = this.getPoint();
        if (curLocation) {
            this.showTooltip(curLocation);
        }
    };
    MarkerActiveAction.prototype.hide = function () {
        var view = this.getView();
        var controller = this.getTooltipController();
        controller.hideTooltip();
        var points = util_1.filter(view.geometries, function (geom) { return geom.type == 'point'; });
        util_1.each(points, function (point) {
            util_1.each(point.elements, function (element) {
                element.setState('active', false);
            });
        });
    };
    MarkerActiveAction.prototype.showTooltip = function (point) {
        var view = this.getView();
        var controller = this.getTooltipController();
        controller.showTooltip(point);
        var items = controller.getTooltipItems(point);
        var points = util_1.filter(view.geometries, function (geom) { return geom.type == 'point'; });
        util_1.each(points, function (point) {
            util_1.each(point.elements, function (element) {
                element.setState('active', util_1.findIndex(items, function (item) { return item.data === element.data; }) !== -1);
            });
        });
    };
    MarkerActiveAction.prototype.getPoint = function () {
        var ev = this.context.event;
        return ev ? { x: ev.x, y: ev.y } : null;
    };
    MarkerActiveAction.prototype.getView = function () {
        return this.context.view;
    };
    MarkerActiveAction.prototype.getTooltipController = function () {
        return this.getView().getController('tooltip-active');
    };
    return MarkerActiveAction;
}(dependents_1.InteractionAction));
exports.default = MarkerActiveAction;
//# sourceMappingURL=marker-active.js.map