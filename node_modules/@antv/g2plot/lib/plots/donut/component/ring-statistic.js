"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var util_1 = require("@antv/util");
var statistic_1 = tslib_1.__importDefault(require("../../../components/statistic"));
var statistic_template_1 = require("./statistic-template");
var util_2 = require("@antv/util");
var RingStatistic = /** @class */ (function (_super) {
    tslib_1.__extends(RingStatistic, _super);
    function RingStatistic(cfg) {
        var _this = _super.call(this, cfg) || this;
        _this.view = cfg.view;
        _this.plot = cfg.plot;
        _this.statisticClass = cfg.statisticClass;
        _this.adjustOptions();
        return _this;
    }
    RingStatistic.prototype.triggerOn = function () {
        var _this = this;
        var triggerOnEvent = this.options.triggerOn;
        this.view.on("interval:" + triggerOnEvent, util_2.debounce(function (e) {
            var displayData = _this.parseStatisticData('item', e.data.data, e.data.color);
            var htmlString = _this.getStatisticHtmlString(displayData);
            _this.updateHtml(htmlString);
        }, 150));
        var triggerOffEvent = this.options.triggerOff ? this.options.triggerOff : 'mouseleave';
        this.view.on("interval:" + triggerOffEvent, util_2.debounce(function () {
            var htmlString = _this.getTotalHtmlString();
            _this.updateHtml(htmlString);
        }, 150));
    };
    RingStatistic.prototype.getTotalHtmlString = function () {
        var displayData;
        if (this.options.content) {
            displayData = this.options.content;
        }
        else {
            /** 用户没有指定文本内容时，默认显示总计 */
            var data = this.getTotalValue();
            displayData = this.parseStatisticData('total', data);
        }
        /** 中心文本显示 */
        var htmlContent;
        if (this.options.htmlContent) {
            htmlContent = this.options.htmlContent(displayData, this.getStatisticSize());
        }
        else {
            htmlContent = this.getStatisticTemplate(displayData);
        }
        var statisticContainer = document.createElement('div');
        if (util_1.isType(htmlContent, 'HTMLDivElement')) {
            // @ts-ignore
            statisticContainer.appendChild(htmlContent);
        }
        else {
            statisticContainer.innerHTML = htmlContent;
        }
        return statisticContainer;
    };
    RingStatistic.prototype.adjustOptions = function () {
        this.html = this.getTotalHtmlString();
        var _a = this.view.coordinateBBox, minX = _a.minX, minY = _a.minY, width = _a.width, height = _a.height;
        this.x = minX + width / 2;
        this.y = minY + height / 2;
    };
    RingStatistic.prototype.getTotalValue = function () {
        var _a;
        var total = 0;
        var _b = this.plot.options, angleField = _b.angleField, colorField = _b.colorField;
        var totalLabel = this.options.totalLabel;
        util_2.each(this.plot.options.data, function (item) {
            if (typeof item[angleField] === 'number') {
                total += item[angleField];
            }
        });
        var data = (_a = {},
            _a[angleField] = total,
            _a[colorField] = totalLabel,
            _a);
        return data;
    };
    RingStatistic.prototype.parseStatisticData = function (type, data, color) {
        var plot = this.plot;
        var _a = plot.options, angleField = _a.angleField, colorField = _a.colorField;
        var angleScale = plot.getScaleByField(angleField);
        var colorScale = plot.getScaleByField(colorField);
        var statisticData = {
            name: colorScale ? colorScale.getText(data[colorField]) : null,
            value: angleScale.getText(data[angleField]),
        };
        if (type === 'item') {
            // 每一个扇形区域的数据
            statisticData.itemData = data;
            statisticData.color = color;
        }
        return statisticData;
    };
    RingStatistic.prototype.getStatisticTemplate = function (data) {
        var size = this.getStatisticSize();
        var htmlString = statistic_template_1.getTemplate(data.name, data.value, this.statisticClass, size);
        /** 更为复杂的文本要求用户自行制定html模板 */
        return htmlString;
    };
    RingStatistic.prototype.getStatisticSize = function () {
        var viewRange = this.plot.view.coordinateBBox;
        var _a = this.plot.options, radius = _a.radius, innerRadius = _a.innerRadius;
        var minContainerSize = Math.min(viewRange.width, viewRange.height);
        var size = minContainerSize * radius * innerRadius;
        return size;
    };
    RingStatistic.prototype.getStatisticHtmlString = function (data) {
        var htmlContent = this.options.htmlContent;
        var htmlString;
        if (htmlContent) {
            htmlString = htmlContent(data, this.getStatisticSize());
        }
        else {
            htmlString = this.getStatisticTemplate(data);
        }
        return htmlString;
    };
    return RingStatistic;
}(statistic_1.default));
exports.default = RingStatistic;
//# sourceMappingURL=ring-statistic.js.map