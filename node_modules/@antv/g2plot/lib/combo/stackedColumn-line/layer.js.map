{"version":3,"file":"layer.js","sourceRoot":"","sources":["../../../src/combo/stackedColumn-line/layer.ts"],"names":[],"mappings":"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","sourcesContent":["import { registerPlotType } from '../../base/global';\nimport { deepMix, each, contains } from '@antv/util';\nimport { LayerConfig } from '../../base/layer';\nimport ColumnLineLayer, { ColumnLineViewConfig } from '../column-line/layer';\nimport StackedColumnLayer from '../../plots/stacked-column/layer';\nimport { getGlobalTheme } from '../../theme';\n\nexport interface StackedColumnLineViewConfig extends ColumnLineViewConfig {\n  columnStackField?: string;\n}\n\ninterface StackedColumnLineLayerConfig extends StackedColumnLineViewConfig, LayerConfig {}\n\nconst defaultLineConfig = {\n  color: '#f5bc32',\n  lineSize: 4,\n  connectNull: true,\n  point: {\n    visible: false,\n    size: 3,\n    shape: 'circle',\n    style: {\n      stroke: '#fff',\n    },\n  },\n  label: {\n    visible: false,\n  },\n};\n\nconst defaultColumnConfig = {\n  color: ['#5B8FF9', '#5AD8A6', '#5D7092', '#F6BD16', '#E8684A', '#6DC8EC', '#9270CA', '#FF9D4D', '#269A99', '#FF99C3'],\n};\n\nconst defaultYAxisConfig = {\n  visible: true,\n  colorMapping: true,\n  grid: {\n    visible: true,\n  },\n  line: {\n    visible: false,\n  },\n  tickLine: {\n    visible: false,\n  },\n  label: {\n    visible: true,\n    autoHide: true,\n    autoRotate: false,\n  },\n  title: {\n    autoRotate: true,\n    visible: false,\n    spacing: 12,\n  },\n};\n\nexport default class StackedColumnLineLayer<\n  T extends StackedColumnLineLayerConfig = StackedColumnLineLayerConfig\n> extends ColumnLineLayer<T> {\n  public static getDefaultOptions(): Partial<StackedColumnLineLayerConfig> {\n    return deepMix({}, super.getDefaultOptions(), {\n      yAxis: {\n        leftConfig: deepMix({}, defaultYAxisConfig, { colorMapping: false }),\n        rightConfig: defaultYAxisConfig,\n      },\n      lineConfig: defaultLineConfig,\n      columnConfig: defaultColumnConfig,\n      legend: {\n        visible: true,\n      },\n    });\n  }\n\n  public type: string = 'groupedColumnLine';\n  protected requiredField: string[] = ['xField', 'yField', 'columnStackField'];\n\n  public beforeInit() {\n    const stackedValue = this.getValueByStackField();\n    const { options, initialOptions } = this;\n    if (options.lineSeriesField) {\n      options.yAxis.rightConfig.colorMapping = false;\n      if (!initialOptions.lineConfig?.lineSize) {\n        options.lineConfig.lineSize = 3;\n      }\n      if (!initialOptions.lineConfig?.color) {\n        const { colors, colors_20 } = getGlobalTheme();\n        const seriesValue = this.getValueBySeriesField();\n        const colorSeries = seriesValue.length > colors.length ? colors_20 : colors;\n        const colorPlates = [];\n        const startIndex = stackedValue.length;\n        each(seriesValue, (v, index) => {\n          colorPlates.push(colorSeries[index + startIndex]);\n        });\n        options.lineConfig.color = colorPlates;\n      }\n    }\n    const { color } = this.options.columnConfig;\n    this.options.columnConfig.color = color.slice(0, stackedValue.length);\n  }\n\n  protected drawColumn() {\n    const { data, xField, yField, columnStackField, xAxis, tooltip, columnConfig, events } = this.options;\n    const column = this.createLayer(StackedColumnLayer, data[0], {\n      xField,\n      yField: yField[0],\n      stackField: columnStackField,\n      xAxis,\n      yAxis: deepMix({}, this.yAxis(0), {\n        grid: {\n          visible: true,\n        },\n        nice: true,\n      }),\n      legend: {\n        visible: false,\n      },\n      tooltip: deepMix({}, tooltip, {\n        showMarkers: false,\n        custom: {\n          onChange: (containerDom, ev) => {\n            this.tooltip(containerDom, ev);\n          },\n        },\n      }),\n      events,\n      ...columnConfig,\n    });\n    column.render();\n  }\n\n  protected customLegend() {\n    const { yField, legend } = this.options;\n    const { colors } = this;\n    const container = this.container.addGroup();\n    const legendCfg = legend;\n    const symbols = ['square', 'circle'];\n    each(this.geomLayers, (geom, index) => {\n      let legend;\n      if (geom.options.seriesField) {\n        const values = this.getValueBySeriesField();\n        legend = this.createNormalLegend(values, symbols[index], colors[index], legendCfg, container);\n      } else if (geom.options.stackField) {\n        const values = this.getValueByStackField();\n        legend = this.createNormalLegend(values, symbols[index], colors[index], legendCfg, container);\n      } else {\n        legend = this.createSingleLegend(yField[index], symbols[index], colors[index], legendCfg, container);\n      }\n      this.legends.push(legend);\n    });\n    // 使用legend做图层筛选\n    each(this.geomLayers, (geom, index) => {\n      if (geom.options.seriesField) {\n        this.multipleLegendFilter(index, geom.options.seriesField);\n      } else if (geom.options.stackField) {\n        this.multipleLegendFilter(index, geom.options.stackField);\n      } else {\n        this.legendFilter(index);\n      }\n    });\n  }\n\n  protected getValueByStackField() {\n    const { columnStackField, data } = this.options;\n    const columnData = data[0];\n    const values = [];\n    each(columnData, (d) => {\n      const v = d[columnStackField];\n      if (!contains(values, v)) {\n        values.push(v);\n      }\n    });\n    return values;\n  }\n\n  protected getUnCheckedValue() {\n    const value = [];\n    each(this.legends, (legend) => {\n      const uncheckedItems = legend.getItemsByState('unchecked');\n      each(uncheckedItems, (item) => {\n        value.push(item.name);\n      });\n    });\n    return value;\n  }\n\n  protected getMockData(index: number) {\n    const { xField, yField, columnStackField } = this.options as any;\n    const mockA = {};\n    mockA[xField] = 'null_1';\n    mockA[yField[index]] = 0;\n    mockA[columnStackField] = 'null_a';\n    const mockB = {};\n    mockB[xField] = 'null_1';\n    mockB[yField[index]] = 1;\n    mockB[columnStackField] = 'null_a';\n    return [mockA, mockB];\n  }\n}\n\nregisterPlotType('stackedColumnLine', StackedColumnLineLayer);\n"]}