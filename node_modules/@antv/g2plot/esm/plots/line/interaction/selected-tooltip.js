import { __assign, __extends } from "tslib";
import { isEqual, last } from '@antv/util';
import { InteractionAction, TooltipController, registerComponentController } from '../../../dependents';
// @ts-ignore
var SelectedTooltipController = /** @class */ (function (_super) {
    __extends(SelectedTooltipController, _super);
    function SelectedTooltipController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Object.defineProperty(SelectedTooltipController.prototype, "name", {
        get: function () {
            return 'selected-tooltip';
        },
        enumerable: false,
        configurable: true
    });
    SelectedTooltipController.prototype.getTooltipCfg = function () {
        // @ts-ignore
        var cfg = _super.prototype.getTooltipCfg.call(this);
        return __assign(__assign({}, cfg), { showContent: false, showCrosshairs: true, showMarkers: true, shared: true });
    };
    return SelectedTooltipController;
}(TooltipController));
export { SelectedTooltipController };
registerComponentController('selected-tooltip', SelectedTooltipController);
var SelectedTooltipAction = /** @class */ (function (_super) {
    __extends(SelectedTooltipAction, _super);
    function SelectedTooltipAction() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SelectedTooltipAction.prototype.show = function () {
        var curLocation = this.getPoint();
        if (!isEqual(curLocation, this.location)) {
            this.location = curLocation;
            this.showTooltip(curLocation);
        }
    };
    SelectedTooltipAction.prototype.hide = function () {
        var controller = this.getTooltipController();
        controller.hideTooltip();
    };
    SelectedTooltipAction.prototype.showTooltip = function (point) {
        var controller = this.getTooltipController();
        controller.showTooltip(point);
    };
    SelectedTooltipAction.prototype.getPoint = function () {
        var ev = this.context.event;
        return ev ? { x: ev.x, y: ev.y } : this.getLastXPoint();
    };
    SelectedTooltipAction.prototype.getLastXPoint = function () {
        var view = this.getView();
        var xScale = view.getXScale();
        var yScale = view.getYScales()[0];
        var coordinate = view.getCoordinate();
        var lastX = last(xScale.getTicks()).value;
        return coordinate.convert({ x: lastX, y: (yScale.range[0] + yScale.range[1]) / 2 });
    };
    SelectedTooltipAction.prototype.getView = function () {
        return this.context.view;
    };
    SelectedTooltipAction.prototype.getTooltipController = function () {
        return this.getView().getController('selected-tooltip');
    };
    return SelectedTooltipAction;
}(InteractionAction));
export { SelectedTooltipAction };
//# sourceMappingURL=selected-tooltip.js.map