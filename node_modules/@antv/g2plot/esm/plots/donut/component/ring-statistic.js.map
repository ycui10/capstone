{"version":3,"file":"ring-statistic.js","sourceRoot":"","sources":["../../../../src/plots/donut/component/ring-statistic.ts"],"names":[],"mappings":"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","sourcesContent":["import { isType } from '@antv/util';\nimport { View } from '../../../dependents';\nimport StatisticHtml, { IStatisticHtml } from '../../../components/statistic';\nimport { getTemplate } from './statistic-template';\nimport { debounce, each } from '@antv/util';\nimport Ring, { DonutViewConfig } from '../layer';\nimport { LooseMap } from '../../../interface/types';\n\ninterface IRingStatistic extends IStatisticHtml {\n  view: View;\n  plot: any;\n}\n\ninterface StatisticData {\n  name: string;\n  value: string;\n  itemData?: LooseMap;\n  color?: string;\n}\n\nexport default class RingStatistic extends StatisticHtml {\n  protected view: View;\n  protected plot: Ring;\n  protected statisticClass: string;\n  protected options: DonutViewConfig['statistic'];\n\n  constructor(cfg: IRingStatistic) {\n    super(cfg);\n    this.view = cfg.view;\n    this.plot = cfg.plot;\n    this.statisticClass = cfg.statisticClass;\n    this.adjustOptions();\n  }\n\n  public triggerOn() {\n    const triggerOnEvent = this.options.triggerOn;\n    this.view.on(\n      `interval:${triggerOnEvent}`,\n      debounce((e) => {\n        const displayData = this.parseStatisticData('item', e.data.data, e.data.color);\n        const htmlString = this.getStatisticHtmlString(displayData);\n        this.updateHtml(htmlString);\n      }, 150)\n    );\n    const triggerOffEvent = this.options.triggerOff ? this.options.triggerOff : 'mouseleave';\n    this.view.on(\n      `interval:${triggerOffEvent}`,\n      debounce(() => {\n        const htmlString = this.getTotalHtmlString();\n        this.updateHtml(htmlString);\n      }, 150)\n    );\n  }\n\n  protected getTotalHtmlString(): HTMLDivElement {\n    let displayData;\n    if (this.options.content) {\n      displayData = this.options.content;\n    } else {\n      /** 用户没有指定文本内容时，默认显示总计 */\n      const data = this.getTotalValue();\n      displayData = this.parseStatisticData('total', data);\n    }\n    /** 中心文本显示 */\n    let htmlContent;\n    if (this.options.htmlContent) {\n      htmlContent = this.options.htmlContent(displayData, this.getStatisticSize());\n    } else {\n      htmlContent = this.getStatisticTemplate(displayData);\n    }\n    const statisticContainer = document.createElement('div');\n    if (isType(htmlContent, 'HTMLDivElement')) {\n      // @ts-ignore\n      statisticContainer.appendChild(htmlContent);\n    } else {\n      statisticContainer.innerHTML = htmlContent;\n    }\n    return statisticContainer;\n  }\n\n  protected adjustOptions() {\n    this.html = this.getTotalHtmlString();\n    const { minX, minY, width, height } = this.view.coordinateBBox;\n    this.x = minX + width / 2;\n    this.y = minY + height / 2;\n  }\n\n  private getTotalValue() {\n    let total = 0;\n    const { angleField, colorField } = this.plot.options;\n    const { totalLabel } = this.options;\n    each(this.plot.options.data, (item) => {\n      if (typeof item[angleField] === 'number') {\n        total += item[angleField];\n      }\n    });\n    const data = {\n      [angleField]: total,\n      [colorField]: totalLabel,\n    };\n    return data;\n  }\n\n  private parseStatisticData(type: string, data, color?: string) {\n    const plot = this.plot;\n    const { angleField, colorField } = plot.options;\n    const angleScale = plot.getScaleByField(angleField);\n    const colorScale = plot.getScaleByField(colorField);\n\n    const statisticData: StatisticData = {\n      name: colorScale ? colorScale.getText(data[colorField]) : null,\n      value: angleScale.getText(data[angleField]),\n    };\n\n    if (type === 'item') {\n      // 每一个扇形区域的数据\n      statisticData.itemData = data;\n      statisticData.color = color;\n    }\n\n    return statisticData;\n  }\n\n  private getStatisticTemplate(data) {\n    const size = this.getStatisticSize();\n    const htmlString = getTemplate(data.name, data.value, this.statisticClass, size);\n    /** 更为复杂的文本要求用户自行制定html模板 */\n    return htmlString;\n  }\n\n  private getStatisticSize() {\n    const viewRange = this.plot.view.coordinateBBox;\n    const { radius, innerRadius } = this.plot.options;\n    const minContainerSize = Math.min(viewRange.width, viewRange.height);\n    const size = minContainerSize * radius * innerRadius;\n    return size;\n  }\n\n  private getStatisticHtmlString(data): string | HTMLDivElement {\n    const htmlContent = this.options.htmlContent;\n    let htmlString: string | HTMLDivElement;\n    if (htmlContent) {\n      htmlString = htmlContent(data, this.getStatisticSize());\n    } else {\n      htmlString = this.getStatisticTemplate(data);\n    }\n\n    return htmlString;\n  }\n}\n"]}