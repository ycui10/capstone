import { __assign, __extends } from "tslib";
import { clamp, deepMix } from '@antv/util';
import BaseComponent from './base';
import { GM, Wheel } from '../dependents';
import { translate, move } from '../util/g-util';
import { getEllipsisText } from '../util/text';
import BBox from '../util/bbox';
export var ELEMENT_NAMES;
(function (ELEMENT_NAMES) {
    ELEMENT_NAMES["TOOLTIP_INDICATOR_INNER"] = "tooltip_indicator-inner";
    ELEMENT_NAMES["TOOLTIP_INDICATOR_TITLE"] = "tooltip_indicator-title";
    ELEMENT_NAMES["TOOLTIP_INDICATOR_BODY"] = "tooltip_indicator-body";
    ELEMENT_NAMES["TOOLTIP_INDICATOR_ITEM_GROUP"] = "tooltip_indicator-item-group";
    ELEMENT_NAMES["TOOLTIP_INDICATOR_ITEM_BACKGROUND"] = "tooltip_indicator-item-background";
    ELEMENT_NAMES["TOOLTIP_INDICATOR_ITEM_LINE"] = "tooltip_indicator-item-line";
    ELEMENT_NAMES["TOOLTIP_INDICATOR_ITEM_TITLE"] = "tooltip_indicator-item-title";
    ELEMENT_NAMES["TOOLTIP_INDICATOR_ITEM_BODY"] = "tooltip_indicator-item-body";
    ELEMENT_NAMES["TOOLTIP_INDICATOR_ITEM_VALUE_GROUP"] = "tooltip_indicator-item-value-group";
    ELEMENT_NAMES["TOOLTIP_INDICATOR_ITEM_NAME"] = "tooltip_indicator-item-name";
    ELEMENT_NAMES["TOOLTIP_INDICATOR_ITEM_VALUE"] = "tooltip_indicator-item-value";
})(ELEMENT_NAMES || (ELEMENT_NAMES = {}));
export var EVENTS;
(function (EVENTS) {
    EVENTS["ON_SELECT_ITEM"] = "onSelectItem";
})(EVENTS || (EVENTS = {}));
var PADDING;
(function (PADDING) {
    PADDING[PADDING["LARGE"] = 12] = "LARGE";
    PADDING[PADDING["NORMAL"] = 8] = "NORMAL";
    PADDING[PADDING["SMALL"] = 4] = "SMALL";
})(PADDING || (PADDING = {}));
var MAX_ITEM_TITLE_WIDTH = 160;
/** 指标卡图例组件 */
var TooltipIndicator = /** @class */ (function (_super) {
    __extends(TooltipIndicator, _super);
    function TooltipIndicator() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.curX = 0;
        _this.curY = 0;
        _this.offsetX = 0;
        _this.scrollWidth = 0;
        _this.onBodyGroupMousemove = function (evt) {
            var itemGroup = findTargetAncestor(evt.target, function (target) { return target.get('name') === ELEMENT_NAMES.TOOLTIP_INDICATOR_ITEM_GROUP; });
            if (itemGroup) {
                var itemData = itemGroup.get('delegateObject');
                _this.doSelectItem(itemData.item.id);
            }
        };
        _this.onWheel = function (evt) {
            var _a = _this.config.width, width = _a === void 0 ? 0 : _a;
            var deltaX = evt.deltaX;
            var offsetMin = Math.min(_this.scrollWidth - width, 0) - (_this.scrollWidth / 2 + Math.max(0, (_this.scrollWidth - width) / 2));
            var offsetMax = Math.max(_this.scrollWidth - width, 0) + _this.scrollWidth / 2 + Math.max(0, (_this.scrollWidth - width) / 2);
            var newOffsetX = clamp(_this.offsetX + deltaX, offsetMin, offsetMax);
            if (newOffsetX !== _this.offsetX) {
                translate(_this.bodyGroup, _this.offsetX - newOffsetX, 0);
                _this.offsetX = newOffsetX;
            }
        };
        return _this;
    }
    TooltipIndicator.prototype.destroy = function () {
        this.offEvents();
        _super.prototype.destroy.call(this);
    };
    /** 选中某一项 */
    TooltipIndicator.prototype.selectItem = function (id) {
        this.doSelectItem(id);
    };
    /** 重置选中状态 */
    TooltipIndicator.prototype.resetSelect = function () {
        this.doSelectItem(this.selectedItemId);
    };
    TooltipIndicator.prototype.initConfig = function (config) {
        var _a;
        var _b = config.theme, theme = _b === void 0 ? {} : _b;
        var defaultCfg = {
            x: 0,
            y: 0,
            title: {
                text: '',
                spacingY: PADDING.NORMAL,
                style: {},
            },
            line: {
                spacingX: PADDING.SMALL,
                width: 2,
                style: {},
            },
            itemTitle: {
                spacingX: 0,
                spacingY: PADDING.SMALL,
                style: {},
            },
            itemName: {
                spacingX: PADDING.NORMAL,
                spacingY: PADDING.SMALL,
                style: {},
            },
            itemValue: {
                style: {},
            },
            itemBackground: {
                style: {
                    opacity: 0,
                    fill: '#000',
                },
            },
            itemSpacing: PADDING.LARGE,
        };
        this.config = deepMix({}, (_a = theme === null || theme === void 0 ? void 0 : theme.components) === null || _a === void 0 ? void 0 : _a.tooltipIndicator, defaultCfg, config);
        this.selectedItemId = this.config.selectedItem;
    };
    TooltipIndicator.prototype.renderInner = function (group) {
        var _this = this;
        this.resetRender();
        var _a = this.config, items = _a.items, x = _a.x, y = _a.y;
        var itemGroups = [];
        var innerGroup = group.addGroup({
            name: ELEMENT_NAMES.TOOLTIP_INDICATOR_INNER,
        });
        this.renderTitle(innerGroup);
        this.bodyGroup = innerGroup.addGroup({
            name: ELEMENT_NAMES.TOOLTIP_INDICATOR_BODY,
        });
        items === null || items === void 0 ? void 0 : items.forEach(function (item, index) {
            itemGroups.push(_this.renderItem(_this.bodyGroup, item, index));
        });
        this.layoutItems(innerGroup);
        move(innerGroup, x, y);
        this.applyClip(group);
        this.bindEvents(innerGroup);
    };
    TooltipIndicator.prototype.renderTitle = function (group) {
        var title = this.config.title;
        if (title === null || title === void 0 ? void 0 : title.text) {
            var shape = group.addShape({
                type: 'text',
                name: ELEMENT_NAMES.TOOLTIP_INDICATOR_TITLE,
                attrs: __assign({ text: title === null || title === void 0 ? void 0 : title.text, textAlign: 'left', textBaseline: 'top' }, ((title === null || title === void 0 ? void 0 : title.style) || {})),
            });
            var bbox = shape.getBBox();
            this.curY += bbox.height;
            this.curY += title.spacingY || 0;
            return shape;
        }
    };
    TooltipIndicator.prototype.renderItem = function (group, item, index) {
        var itemBackground = this.config.itemBackground;
        var itemGroup = group.addGroup({
            name: ELEMENT_NAMES.TOOLTIP_INDICATOR_ITEM_GROUP,
            delegateObject: {
                item: item,
                index: index,
            },
        });
        var oldX = this.curX;
        var oldY = this.curY;
        var background = itemGroup.addShape({
            name: ELEMENT_NAMES.TOOLTIP_INDICATOR_ITEM_BACKGROUND,
            type: 'rect',
            attrs: __assign({ x: this.curX, y: this.curY, width: 1, height: 1 }, (itemBackground.style || {})),
        });
        var line = this.renderLine(itemGroup, item);
        this.renderItemTitle(itemGroup, item);
        this.renderItemValues(itemGroup, item);
        var itemGroupBBox = itemGroup.getBBox();
        // update line height
        line.attr({
            y2: line.attr('y1') + itemGroupBBox.height,
        });
        // spacing
        this.curX = oldX + itemGroupBBox.width;
        this.curX += this.config.itemSpacing || 0;
        // update background
        background.attr({
            width: this.curX - oldX - background.attr('lineWidth') * 2,
            height: this.curY - oldY - background.attr('lineWidth') * 2,
        });
        // reset Y
        this.curY = oldY;
        return itemGroup;
    };
    TooltipIndicator.prototype.renderLine = function (group, item) {
        var line = this.config.line;
        var width = line.width || 2;
        var attrs = __assign({ x1: this.curX + width / 2, y1: this.curY, x2: this.curX + width / 2, y2: this.curY, lineWidth: width, stroke: item.color }, ((line === null || line === void 0 ? void 0 : line.style) || {}));
        var shape = group.addShape({
            name: ELEMENT_NAMES.TOOLTIP_INDICATOR_ITEM_LINE,
            type: 'line',
            attrs: attrs,
        });
        var bbox = shape.getBBox();
        this.curX += bbox.width;
        this.curX += line.spacingX || 0;
        return shape;
    };
    TooltipIndicator.prototype.renderItemTitle = function (group, item) {
        var itemTitle = this.config.itemTitle;
        var text = getEllipsisText(item.title, MAX_ITEM_TITLE_WIDTH, itemTitle.style || {});
        var shape = group.addShape({
            name: ELEMENT_NAMES.TOOLTIP_INDICATOR_ITEM_TITLE,
            type: 'text',
            attrs: __assign({ x: this.curX, y: this.curY, textAlign: 'left', textBaseline: 'top', text: text }, (itemTitle.style || {})),
        });
        var bbox = shape.getBBox();
        this.curY += bbox.height;
        this.curY += itemTitle.spacingY || 0;
        return shape;
    };
    TooltipIndicator.prototype.renderItemValues = function (group, item) {
        var _this = this;
        var _a;
        var itemBodyGroup = group.addGroup({
            name: ELEMENT_NAMES.TOOLTIP_INDICATOR_ITEM_BODY,
        });
        var oldX = this.curX;
        (_a = item.values) === null || _a === void 0 ? void 0 : _a.forEach(function (value, valueIndex) {
            var valueGroup = itemBodyGroup.addGroup({
                name: ELEMENT_NAMES.TOOLTIP_INDICATOR_ITEM_VALUE_GROUP,
                delegateObject: {
                    item: item,
                    valueIndex: valueIndex,
                },
            });
            // reset x
            _this.curX = oldX;
            _this.renderItemValueName(valueGroup, value);
            _this.renderItemValueValue(valueGroup, value);
        });
        this.layoutItemValues(itemBodyGroup);
        return itemBodyGroup;
    };
    TooltipIndicator.prototype.renderItemValueName = function (group, value) {
        var itemName = this.config.itemName;
        if (value.name) {
            var shape = group.addShape({
                name: ELEMENT_NAMES.TOOLTIP_INDICATOR_ITEM_NAME,
                type: 'text',
                attrs: __assign({ x: this.curX, y: this.curY, textAlign: 'left', textBaseline: 'top', text: value.name }, (itemName.style || {})),
            });
            var bbox = shape.getBBox();
            if (value.wrapLine) {
                this.curY += bbox.height;
                this.curY += itemName.spacingY || 0;
            }
            else {
                this.curX += bbox.width;
                this.curX += itemName.spacingX || 0;
            }
            return shape;
        }
    };
    TooltipIndicator.prototype.renderItemValueValue = function (group, value) {
        var _a = this.config, itemName = _a.itemName, itemValue = _a.itemValue;
        var shape = group.addShape({
            name: ELEMENT_NAMES.TOOLTIP_INDICATOR_ITEM_VALUE,
            type: 'text',
            attrs: __assign({ x: this.curX, y: this.curY, textAlign: 'left', textBaseline: 'top', text: value.value }, (itemValue.style || {})),
        });
        var bbox = shape.getBBox();
        this.curY += bbox.height;
        this.curY += itemName.spacingY || 0;
        return shape;
    };
    TooltipIndicator.prototype.layoutItems = function (group) {
        var bodyGroup = group.findAllByName(ELEMENT_NAMES.TOOLTIP_INDICATOR_BODY)[0];
        var itemGroups = group.findAllByName(ELEMENT_NAMES.TOOLTIP_INDICATOR_ITEM_GROUP);
        if (!bodyGroup || itemGroups.length === 0) {
            return;
        }
        var bodyGroupBBox = bodyGroup.getBBox();
        this.scrollWidth = bodyGroupBBox.width;
    };
    TooltipIndicator.prototype.layoutItemValues = function (group) {
        var valueGroups = group.findAllByName(ELEMENT_NAMES.TOOLTIP_INDICATOR_ITEM_VALUE_GROUP);
        var valueGroupBBoxes = valueGroups.map(function (item) { return BBox.fromBBoxObject(item.getBBox()); });
        var valueShapes = group.findAllByName(ELEMENT_NAMES.TOOLTIP_INDICATOR_ITEM_VALUE);
        var valueShapeBBoxes = valueShapes.map(function (shape) { return BBox.fromBBoxObject(shape.getBBox()); });
        var maxX = Math.max.apply(Math, valueShapeBBoxes.map(function (bbox) { return bbox.maxX; }));
        valueGroups.forEach(function (valueGroup, index) {
            var bbox = valueGroupBBoxes[index];
            var nameShape = valueGroup.findAllByName(ELEMENT_NAMES.TOOLTIP_INDICATOR_ITEM_NAME)[0];
            var valueShape = valueGroup.findAllByName(ELEMENT_NAMES.TOOLTIP_INDICATOR_ITEM_VALUE)[0];
            if (nameShape && valueShape) {
                var nameShapeBBox = BBox.fromBBoxObject(nameShape.getBBox());
                var valueShapeBBox = BBox.fromBBoxObject(valueShape.getBBox());
                // horizontal align: name & value
                if (nameShapeBBox.height < bbox.height) {
                    nameShape.attr('y', nameShape.attr('y') + (bbox.height - nameShapeBBox.height) / 2);
                }
                if (valueShapeBBox.height < bbox.height) {
                    valueShape.attr('y', valueShape.attr('y') + (bbox.height - valueShapeBBox.height) / 2);
                }
                // vertical align values
                if (valueShapeBBox.maxX < maxX) {
                    valueShape.attr('x', valueShape.attr('x') + maxX - valueShapeBBox.maxX);
                }
            }
        });
    };
    TooltipIndicator.prototype.applyClip = function (group) {
        var _a = this.config, x = _a.x, y = _a.y, width = _a.width, height = _a.height;
        var bbox = group.getBBox();
        if (width || height) {
            group.setClip({
                type: 'rect',
                attrs: {
                    x: x,
                    y: y,
                    width: width || bbox.width,
                    height: height || bbox.height,
                },
            });
        }
    };
    TooltipIndicator.prototype.doSelectItem = function (id) {
        var _this = this;
        var group = this.getGroup();
        var itemGroups = group.findAllByName(ELEMENT_NAMES.TOOLTIP_INDICATOR_ITEM_GROUP);
        if (id !== this.selectedItemId) {
            itemGroups.forEach(function (itemGroup) {
                var curItemData = itemGroup.get('delegateObject');
                if (curItemData) {
                    _this.applyItemStyle(itemGroup, curItemData.item.id === id ? 'selected' : 'inactive');
                }
            });
            this.selectedItemId = id;
        }
        else {
            // 取消选中
            itemGroups.forEach(function (itemGroup) {
                _this.applyItemStyle(itemGroup);
            });
            this.selectedItemId = undefined;
        }
        this.emit(EVENTS.ON_SELECT_ITEM, this.selectedItemId);
    };
    TooltipIndicator.prototype.applyItemStyle = function (itemGroup, state) {
        var _a = this.config, line = _a.line, itemTitle = _a.itemTitle, itemName = _a.itemName, itemValue = _a.itemValue;
        var lineShape = itemGroup.findAllByName(ELEMENT_NAMES.TOOLTIP_INDICATOR_ITEM_LINE)[0];
        var titleShape = itemGroup.findAllByName(ELEMENT_NAMES.TOOLTIP_INDICATOR_ITEM_TITLE)[0];
        var itemNameShapes = itemGroup.findAllByName(ELEMENT_NAMES.TOOLTIP_INDICATOR_ITEM_NAME);
        var itemValueShapes = itemGroup.findAllByName(ELEMENT_NAMES.TOOLTIP_INDICATOR_ITEM_VALUE);
        var styleName = state && state + "Style";
        if (lineShape) {
            lineShape.attr(line.style);
            lineShape.attr(line[styleName] || {});
        }
        if (titleShape) {
            titleShape.attr(itemTitle.style);
            titleShape.attr(itemTitle[styleName] || {});
        }
        itemNameShapes.forEach(function (itemNameShape) {
            itemNameShape.attr(itemName.style);
            itemNameShape.attr(itemName[styleName] || {});
        });
        itemValueShapes.forEach(function (itemValueShape) {
            itemValueShape.attr(itemValue.style);
            itemValueShape.attr(itemValue[styleName] || {});
        });
    };
    TooltipIndicator.prototype.bindEvents = function (group) {
        var _this = this;
        this.offEvents();
        var bodyGroup = group.findAllByName(ELEMENT_NAMES.TOOLTIP_INDICATOR_BODY)[0];
        bodyGroup.on('mousemove', this.onBodyGroupMousemove);
        this.addDisposable(function () {
            bodyGroup.off('mousemove', _this.onBodyGroupMousemove);
        });
        this.gm = new GM(bodyGroup);
        this.wheel = new Wheel(bodyGroup);
        this.wheel.on('wheel', this.onWheel);
    };
    TooltipIndicator.prototype.offEvents = function () {
        if (this.gm) {
            this.gm.destroy();
        }
        if (this.wheel) {
            this.wheel.destroy();
        }
    };
    TooltipIndicator.prototype.resetRender = function () {
        this.curX = 0;
        this.curY = 0;
        this.offsetX = 0;
    };
    return TooltipIndicator;
}(BaseComponent));
export default TooltipIndicator;
function findTargetAncestor(element, predicate) {
    var cur = element;
    while (cur) {
        if (predicate(cur)) {
            return cur;
        }
        cur = cur.getParent();
    }
}
//# sourceMappingURL=tooltip-indicator.js.map