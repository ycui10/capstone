import BaseComponent, { BaseComponentConfig } from './base';
import { IGroup } from '../dependents';
import { TextStyle, GraphicStyle } from '../interface/config';
export interface IndicatorItemItemValue {
    /** 数值项名称，可选 */
    name?: string;
    /** 数值项数值 */
    value: string | number;
    /** 数值项名称和数值是否换行，默认否 */
    wrapLine?: boolean;
}
/** 指标卡每一项数据 */
export interface IndicatorItem {
    /** 标识符 */
    id: string | number;
    /** Marker 颜色 */
    color: string;
    /** 标题 */
    title: string;
    /** 数值项配置：指标卡一项可以拥有多项数值配置项 */
    values: IndicatorItemItemValue[];
}
/** 指标卡组件配置项 */
export interface TooltipIndicatorRawConfig {
    /** 位置信息 */
    readonly x?: number;
    readonly y?: number;
    readonly width?: number;
    readonly height?: number;
    /** 数据项 */
    readonly items?: IndicatorItem[];
    /** 选中的数据项 ID */
    readonly selectedItem?: string;
    /** 指标卡标题 */
    readonly title?: {
        text?: string;
        spacingY?: number;
        style?: TextStyle;
        activeStyle?: TextStyle;
        inactiveStyle?: TextStyle;
        selectedStyle?: TextStyle;
    };
    /** marker 配置 */
    readonly line?: {
        spacingX?: number;
        width?: number;
        style?: GraphicStyle;
        activeStyle?: GraphicStyle;
        inactiveStyle?: GraphicStyle;
        selectedStyle?: GraphicStyle;
    };
    /** 指标卡每一项的标题配置 */
    itemTitle?: {
        spacingX?: number;
        spacingY?: number;
        style?: TextStyle;
        activeStyle?: TextStyle;
        inactiveStyle?: TextStyle;
        selectedStyle?: TextStyle;
    };
    /** 数值项名称配置 */
    itemName?: {
        spacingX?: number;
        spacingY?: number;
        style?: TextStyle;
        activeStyle?: TextStyle;
        inactiveStyle?: TextStyle;
        selectedStyle?: TextStyle;
    };
    /** 数值配置 */
    itemValue?: {
        spacingX?: number;
        spacingY?: number;
        style?: TextStyle;
        activeStyle?: TextStyle;
        inactiveStyle?: TextStyle;
        selectedStyle?: TextStyle;
    };
    itemBackground?: {
        style?: GraphicStyle;
    };
    /** 每一项间距 */
    itemSpacing?: number;
    /** 每一项最小宽度 */
    minItemWidth?: number;
    /** 每一项最大宽度 */
    maxItemWidth?: number;
    /** G2Plot 主题配置 */
    theme?: any;
}
interface TooltipIndicatorConfig extends TooltipIndicatorRawConfig, BaseComponentConfig {
}
export declare enum ELEMENT_NAMES {
    TOOLTIP_INDICATOR_INNER = "tooltip_indicator-inner",
    TOOLTIP_INDICATOR_TITLE = "tooltip_indicator-title",
    TOOLTIP_INDICATOR_BODY = "tooltip_indicator-body",
    TOOLTIP_INDICATOR_ITEM_GROUP = "tooltip_indicator-item-group",
    TOOLTIP_INDICATOR_ITEM_BACKGROUND = "tooltip_indicator-item-background",
    TOOLTIP_INDICATOR_ITEM_LINE = "tooltip_indicator-item-line",
    TOOLTIP_INDICATOR_ITEM_TITLE = "tooltip_indicator-item-title",
    TOOLTIP_INDICATOR_ITEM_BODY = "tooltip_indicator-item-body",
    TOOLTIP_INDICATOR_ITEM_VALUE_GROUP = "tooltip_indicator-item-value-group",
    TOOLTIP_INDICATOR_ITEM_NAME = "tooltip_indicator-item-name",
    TOOLTIP_INDICATOR_ITEM_VALUE = "tooltip_indicator-item-value"
}
export declare enum EVENTS {
    ON_SELECT_ITEM = "onSelectItem"
}
/** 指标卡图例组件 */
export default class TooltipIndicator extends BaseComponent<TooltipIndicatorConfig> {
    private curX;
    private curY;
    private offsetX;
    private scrollWidth;
    private bodyGroup;
    private gm;
    private wheel;
    private selectedItemId;
    destroy(): void;
    /** 选中某一项 */
    selectItem(id: string | number): void;
    /** 重置选中状态 */
    resetSelect(): void;
    protected initConfig(config: TooltipIndicatorConfig): void;
    protected renderInner(group: IGroup): void;
    private renderTitle;
    private renderItem;
    private renderLine;
    private renderItemTitle;
    private renderItemValues;
    private renderItemValueName;
    private renderItemValueValue;
    private layoutItems;
    private layoutItemValues;
    private applyClip;
    private doSelectItem;
    private applyItemStyle;
    private bindEvents;
    private offEvents;
    private onBodyGroupMousemove;
    private onWheel;
    private resetRender;
}
export {};
