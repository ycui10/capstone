import { __assign, __extends } from "tslib";
import { isEqual, last } from '@antv/util';
import BaseInteraction from './base';
import { InteractionAction, registerAction, registerInteraction, VIEW_LIFE_CIRCLE, InteractionUtils, } from '../dependents';
import TooltipIndicator, { EVENTS as TOOLTIP_COMPONENTS_EVENTS } from '../components/tooltip-indicator';
import { forEachElement } from '../util/view';
import BBox from '../util/bbox';
var DEFAULT_PADDING = 8;
var getValidTooltipIndicatorConfig = function (cfg) {
    if (cfg === void 0) { cfg = {}; }
    var newCfg = __assign({ showTotal: false, showPercent: false, padding: [DEFAULT_PADDING, 24, DEFAULT_PADDING, 24], height: cfg.showPercent ? 72 : 54 }, cfg);
    return newCfg;
};
export var TOOLTIP_INDICATOR_EVENTS;
(function (TOOLTIP_INDICATOR_EVENTS) {
    TOOLTIP_INDICATOR_EVENTS["ACTIVE_ELEMENT"] = "tooltip_indicator_active_element";
    TOOLTIP_INDICATOR_EVENTS["ACTIVE_ELEMENT_BY_X"] = "tooltip_indicator_active_element_by_x";
})(TOOLTIP_INDICATOR_EVENTS || (TOOLTIP_INDICATOR_EVENTS = {}));
/**
 * Tooltip Indicator Action 实现
 */
var TooltipIndicationAction = /** @class */ (function (_super) {
    __extends(TooltipIndicationAction, _super);
    function TooltipIndicationAction() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.state = 'selected';
        _this.isSingle = false;
        return _this;
    }
    /** 交互语法触发点 */
    TooltipIndicationAction.prototype.active = function () {
        var element = InteractionUtils.getCurrentElement(this.context);
        if (element.hasState('selected')) {
            if (this.isSingle) {
                this.setStateByX(element);
            }
            else {
                this.setState(element);
            }
        }
        else {
            this.setStateByX(element);
        }
    };
    /** 单个元素的 enable */
    TooltipIndicationAction.prototype.setState = function (element) {
        var _this = this;
        forEachElement(this.getView(), function (item) {
            if (item === element) {
                if (!item.hasState(_this.state)) {
                    item.setState(_this.state, true);
                }
            }
            else {
                item.setState(_this.state, false);
            }
        });
        this.isSingle = true;
        this.getView().emit(TOOLTIP_INDICATOR_EVENTS.ACTIVE_ELEMENT, { element: element, isSingle: true });
    };
    /** 同 X 的元素的 enable */
    TooltipIndicationAction.prototype.setStateByX = function (element) {
        var _this = this;
        var xField = this.getXField();
        var xValue = element.getData()[xField];
        forEachElement(this.getView(), function (item) {
            if (item.getData()[xField] === xValue) {
                if (!item.hasState(_this.state)) {
                    item.setState(_this.state, true);
                }
            }
            else {
                item.setState(_this.state, false);
            }
        });
        this.isSingle = false;
        this.getView().emit(TOOLTIP_INDICATOR_EVENTS.ACTIVE_ELEMENT_BY_X, { element: element, isSingle: false });
    };
    /** 通过字段值来 enable */
    TooltipIndicationAction.prototype.setStateByField = function (xFieldValue, groupFieldValue) {
        var _this = this;
        var xField = this.getView().getXScale().field;
        var groupField = this.getView().getGroupScales()[0].field;
        forEachElement(this.getView(), function (element) {
            var data = element.getData();
            element.setState(_this.state, data[xField] === xFieldValue && (groupFieldValue === undefined || data[groupField] === groupFieldValue));
        });
    };
    TooltipIndicationAction.prototype.getView = function () {
        return this.context.view;
    };
    TooltipIndicationAction.prototype.getXField = function () {
        var view = this.context.view;
        return view.getXScale().field;
    };
    return TooltipIndicationAction;
}(InteractionAction));
export { TooltipIndicationAction };
registerAction('tooltip-indicator', TooltipIndicationAction);
registerInteraction('element-tooltip-indicator', {
    start: [
        {
            trigger: 'element:mousemove',
            action: 'tooltip-indicator:active',
            throttle: { wait: 50, leading: true, trailing: false },
        },
        {
            trigger: 'element:touchmove',
            action: 'tooltip-indicator:active',
            throttle: { wait: 50, leading: true, trailing: false },
        },
    ],
});
/**
 * 组件 Interaction 实现
 */
var TooltipIndicatorInteraction = /** @class */ (function (_super) {
    __extends(TooltipIndicatorInteraction, _super);
    function TooltipIndicatorInteraction() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onElementActive = function (_a) {
            var element = _a.element, isSingle = _a.isSingle;
            var xScale = _this.view.getXScale();
            var xField = _this.view.getXScale().field;
            var groupField = _this.view.getGroupScales()[0].field;
            var data = element.getData();
            var xValue = data[xField];
            var items = _this.getLegendItems(xValue);
            _this.component.update({ items: items, title: { text: xScale.getText(xValue) } });
            _this.component.render();
            if (isSingle) {
                _this.component.selectItem(data[groupField]);
            }
            _this.curX = xValue;
        };
        _this.onSelectTooltipIndicatorItem = function (itemId) {
            if (_this.component && itemId) {
                _this.getInteractionAction().setStateByField(_this.curX, itemId);
            }
        };
        return _this;
    }
    TooltipIndicatorInteraction.getInteractionRange = function (layerRange, interaction) {
        var config = getValidTooltipIndicatorConfig(interaction);
        var _a = config.padding, paddingTop = _a[0], paddingBottom = _a[2];
        return new BBox(layerRange.minX, layerRange.minY, layerRange.width, config.height + paddingTop + paddingBottom);
    };
    TooltipIndicatorInteraction.prototype.clear = function () {
        if (this.component) {
            this.component.destroy();
        }
        if (this.container) {
            this.container.remove(true);
        }
        this.component = null;
        this.container = null;
    };
    TooltipIndicatorInteraction.prototype.render = function () {
        var _this = this;
        var view = this.view;
        var callback = function () {
            var xScale = _this.view.getXScale();
            var lastX = last(xScale.getTicks()).tickValue;
            var padding = _this.view.padding;
            if (!isEqual([0, 0, 0, 0], padding)) {
                if (_this.component) {
                    _this.updateComponent();
                }
                else {
                    _this.createComponent();
                    _this.component.on(TOOLTIP_COMPONENTS_EVENTS.ON_SELECT_ITEM, _this.onSelectTooltipIndicatorItem);
                }
                // 默认选中最后的 X
                _this.curX = lastX;
                _this.component.update({
                    title: { text: xScale.getText(_this.curX) },
                });
                _this.component.render();
                _this.getInteractionAction().setStateByField(lastX);
            }
        };
        // 移除冲突/重复的组件和交互
        view.legend(false);
        view.removeInteraction('active-region');
        view.removeInteraction('tooltip');
        view.interaction('element-tooltip-indicator');
        // 监听 View， 创建/更新组件
        view.on(VIEW_LIFE_CIRCLE.AFTER_PAINT, callback);
        view.on(VIEW_LIFE_CIRCLE.AFTER_RENDER, callback);
        // 监听组件事件，更新 action
        view.on(TOOLTIP_INDICATOR_EVENTS.ACTIVE_ELEMENT, this.onElementActive);
        view.on(TOOLTIP_INDICATOR_EVENTS.ACTIVE_ELEMENT_BY_X, this.onElementActive);
    };
    TooltipIndicatorInteraction.prototype.getInteractionAction = function () {
        var interaction = this.view.interactions['element-tooltip-indicator'];
        return interaction && interaction.context.getAction('tooltip-indicator');
    };
    TooltipIndicatorInteraction.prototype.createComponent = function () {
        var padding = getValidTooltipIndicatorConfig(this.getInteractionConfig()).padding;
        var paddingTop = padding[0], paddingRight = padding[1], paddingBottom = padding[2], paddingLeft = padding[3];
        var items = this.getLegendItems();
        var range = this.getRange();
        var xScale = this.view.getXScale();
        var lastX = last(xScale.getTicks()).tickValue;
        this.container = this.canvas.addGroup();
        this.component = new TooltipIndicator({
            container: this.container,
            x: range.x + paddingLeft,
            y: range.y + paddingTop,
            width: range.width - paddingLeft - paddingRight,
            height: range.height - paddingTop - paddingBottom,
            theme: this.getViewLayer().getPlotTheme(),
            items: items,
        });
        this.component.init();
        this.getInteractionAction().setStateByField(lastX);
    };
    TooltipIndicatorInteraction.prototype.updateComponent = function () {
        var items = this.getLegendItems();
        this.component.update({
            items: items,
        });
    };
    TooltipIndicatorInteraction.prototype.getLegendItems = function (xValue) {
        var view = this.view;
        var data = view.getData();
        var defaultColor = view.getTheme().defaultColor;
        var xScale = view.getXScale();
        var yScale = view.getYScales()[0];
        var curX = xValue || last(xScale.getTicks()).tickValue;
        var groupAttrs = view.getLegendAttributes();
        var colorAttr = groupAttrs.find(function (attr) { return attr.type === 'color'; });
        var items = [];
        // 取第一个分组scale，暂不考虑多个分组情况
        var groupScale = view.getGroupScales()[0];
        var groupField = groupScale.field;
        if (groupScale && groupScale.isCategory) {
            // 只处理离散情况
            groupScale.getTicks().forEach(function (tick) {
                var name = tick.text, value = tick.tickValue;
                var color = colorAttr.mapping(value).join('') || defaultColor;
                items.push({
                    id: value,
                    title: name,
                    color: color,
                    values: [],
                });
            });
        }
        var selectedData = (data === null || data === void 0 ? void 0 : data.filter(function (datum) { return datum[xScale.field] === curX; })) || [];
        items.forEach(function (item) {
            var datum = selectedData.find(function (curDatum) { return curDatum[groupField] === item.id; });
            item.values.push({
                value: yScale.formatter ? yScale.formatter(datum[yScale.field]) : datum[yScale.field],
            });
        });
        return items;
    };
    return TooltipIndicatorInteraction;
}(BaseInteraction));
export default TooltipIndicatorInteraction;
//# sourceMappingURL=tooltip-indicator.js.map