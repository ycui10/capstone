{"version":3,"file":"layer.js","sourceRoot":"","sources":["../../../src/combo/dual-line/layer.ts"],"names":[],"mappings":"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","sourcesContent":["import { Legend } from '@antv/component';\nimport { registerPlotType } from '../../base/global';\nimport ComboViewLayer from '../base';\nimport { LayerConfig } from '../../base/layer';\nimport LineLayer from '../../plots/line/layer';\nimport { clone, deepMix, each, findIndex } from '@antv/util';\nimport { IValueAxis, ICatAxis, ITimeAxis } from '../../interface/config';\nimport { ComboViewConfig, LineConfig } from '../util/interface';\n\nexport interface DualLineViewConfig extends ComboViewConfig {\n  xAxis?: IValueAxis | ICatAxis | ITimeAxis;\n  tooltip?: any;\n  lineConfigs?: LineConfig[];\n  /** 用户自定义 meta */\n  customMeta?: boolean;\n}\n\nconst defaultLineConfig = {\n  lineSize: 2,\n  connectNull: true,\n  point: {\n    visible: false,\n    size: 3,\n    shape: 'circle',\n    style: {\n      stroke: '#fff',\n    },\n  },\n  label: {\n    visible: false,\n  },\n};\n\nconst defaultYAxisConfig = {\n  visible: true,\n  colorMapping: true,\n  grid: {\n    visible: true,\n  },\n  line: {\n    visible: false,\n  },\n  tickLine: {\n    visible: false,\n  },\n  label: {\n    visible: true,\n    autoHide: true,\n    autoRotate: false,\n  },\n  title: {\n    autoRotate: true,\n    visible: false,\n    offset: 12,\n  },\n};\n\ninterface DualLineLayerConfig extends DualLineViewConfig, LayerConfig {}\n\nexport default class DualLineLayer<T extends DualLineLayerConfig = DualLineLayerConfig> extends ComboViewLayer<T> {\n  public static getDefaultOptions(): Partial<DualLineLayerConfig> {\n    return deepMix({}, super.getDefaultOptions(), {\n      legend: {\n        visible: true,\n      },\n      yAxis: {\n        leftConfig: defaultYAxisConfig,\n        rightConfig: defaultYAxisConfig,\n      },\n      // 自古红蓝出cp....\n      lineConfigs: [\n        deepMix({}, defaultLineConfig, { color: '#5B8FF9' }),\n        deepMix({}, defaultLineConfig, { color: '#e76c5e' }),\n      ],\n    });\n  }\n\n  public type: string = 'dualLine';\n\n  public init() {\n    super.init();\n    if (!this.checkData()) {\n      return;\n    }\n    const { data, meta, xField, yField, xAxis, tooltip, lineConfigs, legend, events, customMeta } = this.options;\n    this.colors = [lineConfigs[0].color as string, lineConfigs[1].color as string];\n    const yAxisGlobalConfig = this.getYAxisGlobalConfig();\n    //draw first line\n    const leftLine = this.createLayer(LineLayer, data[0], {\n      meta,\n      xField,\n      yField: yField[0],\n      xAxis: {\n        visible: false,\n      },\n      yAxis: deepMix(\n        {},\n        yAxisGlobalConfig,\n        {\n          grid: {\n            visible: false,\n          },\n          nice: true,\n        },\n        this.yAxis(0)\n      ),\n      tooltip: {\n        visible: false,\n      },\n      events,\n      ...lineConfigs[0],\n    });\n    leftLine.render();\n    //draw second line\n    const metaInfo = {};\n    metaInfo[yField[1]] = { ticks: this.getTicks() };\n    const rightLine = this.createLayer(LineLayer, data[1], {\n      xField,\n      yField: yField[1],\n      meta: !customMeta ? deepMix({}, meta, metaInfo) : meta,\n      serieField: yField[1],\n      xAxis,\n      yAxis: deepMix(\n        {},\n        yAxisGlobalConfig,\n        {\n          position: 'right',\n          nice: false,\n        },\n        this.yAxis(1)\n      ),\n      tooltip: deepMix(\n        {},\n        {\n          showMarkers: false,\n          custom: {\n            onChange: (containerDom, ev) => {\n              this.tooltip(containerDom, ev);\n            },\n          },\n        },\n        tooltip\n      ),\n      events,\n      ...lineConfigs[1],\n    });\n    rightLine.render();\n    if (legend.visible) {\n      this.customLegend();\n    }\n    this.adjustLayout();\n  }\n\n  protected tooltip(dom, ev) {\n    const unCheckedValue = this.getUnCheckedValue();\n    // 如果legend全部是unchecked的状态，tooltip不显示\n    if (unCheckedValue.length === this.colors.length) {\n      dom.style.display = 'none';\n      return;\n    } else {\n      dom.style.display = 'block';\n    }\n    const { yField, legend } = this.options;\n    const originItem = clone(ev.items[0]);\n    const dataItemsA = this.getDataByXField(ev.title, 0)[0];\n    if (dataItemsA) {\n      if (findIndex(ev.items, (item: any) => item.name === yField[0]) < 0) {\n        ev.items.push({\n          ...originItem,\n          mappingData: deepMix({}, originItem.mappingData, { _origin: dataItemsA }),\n          data: dataItemsA,\n          name: yField[0],\n          value: dataItemsA[yField[0]],\n          color: this.colors[0],\n        });\n      }\n    }\n    if (legend.visible) {\n      each(this.legends, (legend, index) => {\n        const item = legend.get('items')[0];\n        if (item.unchecked) {\n          const spliceIndex = index === 0 ? 1 : 0;\n          ev.items.splice(spliceIndex, 1);\n        }\n      });\n    }\n  }\n\n  protected customLegend() {\n    const { yField, legend } = this.options;\n    const { colors } = this;\n    const container = this.container.addGroup();\n    const legendCfg = legend;\n    each(this.geomLayers, (line, index) => {\n      const markerCfg = deepMix(\n        {},\n        {\n          symbol: 'circle',\n          style: {\n            r: 4,\n            fill: colors[index],\n          },\n        },\n        legendCfg.marker\n      );\n      const items = [\n        {\n          name: yField[index],\n          unchecked: false,\n          marker: markerCfg,\n        },\n      ];\n      const legend = new Legend.Category({\n        id: this.type,\n        container,\n        x: 0,\n        y: 0,\n        items: items,\n        updateAutoRender: true,\n        itemBackground: null,\n        itemName: legendCfg.text,\n      });\n      legend.init();\n      legend.render();\n      this.legends.push(legend);\n    });\n    // 使用legend做图层筛选\n    each(this.geomLayers, (line, index) => {\n      this.legendFilter(index);\n    });\n  }\n}\n\nregisterPlotType('dualLine', DualLineLayer);\n"]}